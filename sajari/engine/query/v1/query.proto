syntax = "proto3";

package sajari.engine.query.v1;

import "sajari/engine/value.proto";
import "sajari/engine/key.proto";
import "sajari/rpc/status.proto";

// Service Query defines methods for querying a collection.
service Query {
  // Search runs a search query over all records in a collection.
  rpc Search (SearchRequest) returns (SearchResponse);

  // Evaluate runs a search query on a single record in a collection.
  rpc Evaluate (EvaluateRequest) returns (SearchResponse);

  // Substitute takes a search request and a record and substitutes the record values
  // in the request.
  rpc Substitute (SubstituteRequest) returns (SearchRequest);

  // Analyse takes an AnalyseRequest (comprised of a search query and a record identifier)
  // and computes the term overlap between the two.
  rpc Analyse (AnalyseRequest) returns (AnalyseResponse);
}

// SearchRequest contains all the parameters to query a collection.
//
// Records in the collection can be queried/scored using a combination of:
// 1. Field values (key-value pairs set by the user).  See Filter, FieldBoost, Sort.
// 2. Terms (extracted from the body of the record, or from string-based indexed fields,
//    i.e. full-text style searching).  See Body, Terms, InstanceBoost.
//
// Quering a collection follows three main steps:
// 1. Select suitable records to include in a result set.
// 2. Rank and sort the records based on scoring and/or sorting rules.
// 3. Compute and aggregate statistical information from the result set.
message SearchRequest {
  // IndexQuery defines criteria for matching and scoring records based on full-text style
  // term matching and record field values.
  //
  // All boost applied here are multiplicative.
  message IndexQuery {
    // Body is a list of weighted free text.
    repeated Body body = 1;

    // Terms is a list of weighted terms, where terms represent tokenised sequences of text.
    repeated Term terms = 2;

    // InstanceBoosts are boost rules computed against a record's term instances.
    //
    // Instance boosting allows callers to boost records which have terms that match
    // a rule.
    repeated InstanceBoost instance_boosts = 3;

    // Instance score mode sets the scoring mode for computing score normalisation.
    enum InstanceScoreMode {
      // Absolute-normalised scoring sets the maximum possible score to be
      // when the exact terms are matched in every indexed field.
      ABS = 0;

      // Maximum-normalised scoring sets the maximum possible score to the maximally
      // scoring index field.
      MAX = 1;
    }

    // Score mode used for computing.
    InstanceScoreMode instance_score_mode = 5;

    // FieldBoosts are rules checked against a record's field values.
    //
    // Field boosting allows callers to boost records which have field values that
    // match a rule.
    repeated FieldBoost field_boosts = 4;
  }

  // FeatureQuery defines criteria for boosting
  message FeatureQuery {
    // FieldBoost is a boost is a feature boost on a field.
    message FieldBoost {
      // FieldBoost to make a feature boost.
      sajari.engine.query.v1.FieldBoost field_boost = 1;

      // Amount this boost will contribute to the overall score of the record.
      //
      // Must be between 0 and 1.
      double value = 2;
    }

    // A list of field boosts.
    repeated FieldBoost field_boosts = 1;
  }

  // Filter is a rule checked against record field values.
  //
  // Only records that match the filter will be included in the result.
  // By default all records are included.
  Filter filter = 1;

  // IndexQuery is the matching configuration for index-based matching.
  IndexQuery index_query = 2;

  // Feature query is the matching configuration for feature-based matching.
  FeatureQuery feature_query = 3;

  // Offset is the offset to return results from.
  int32 offset = 4;

  // Limit is the number of results to return.
  int32 limit = 5;

  // Fields to be returned for each record in the results.
  // By default all fields are returned.
  repeated string fields = 6;

  // Sort ordering applied to results.
  // Multiple sorts can be applied sequentially.
  // By default all results are ordered by score.
  repeated Sort sort = 7;

  // A set of Aggregates to be run on the result set.
  map<string, Aggregate> aggregates = 8;

  // Transforms to be applied to the request before it is run.
  repeated Transform transforms = 9;
}

// Transform is a transformation of the search request to be applied before
// the search is run. Transforms are typically used to extract additional
// features or to augment the input query itself.
message Transform {
  string identifier = 1;
}

// Term represents a tokenized piece of text (i.e. a single word, or number).
message Term {
  // Term string value.
  string value = 1;

  // Field that the term originated from.
  string field = 2;

  // Number of positive interactions (uint16) this Term instance has been involved with.
  uint32 pos = 3;

  // Number of negative interactions (uint16) this Term instance has been involved with.
  uint32 neg = 4;

  // Significance of the term (uint16).
  double weight = 5;

  // Word offset (context) (uint16).
  // The position of this term instance in it's immediate context (i.e. paragraph).
  uint32 word_offset = 6;

  // Paragraph offset (context) (uint16).
  // The paragraph position (a grouping of term instances) in a body string.
  uint32 para_offset = 7;
}

// EvaluateRequest contains all parameters necessary to make an Evaluate call.
message EvaluateRequest {
  // Search request to run.
  SearchRequest search_request = 1;

  // Record to search against.
  map<string, Value> record = 2;
}

message SubstituteRequest {
  // Request is used as a template
  SearchRequest search_request = 1;

  // Record is the record to be substituted in the request.
  map<string, Value> record = 2;
}

// Body is a weighted free text query.
message Body {
  // Text (free text).
  string text = 1;

  // Weight (importance) to apply to this text.
  // This value must be 0 <= weight <= 1 but must be set. A value of zero means
  // the text has no value.
  double weight = 2;
}

// Aggregate is a statistical query run on the result set of a search.
message Aggregate {
  // Metric calculates numerical information from a field.
  message Metric {
    // Name of the field to run numerical metrics.
    string field = 1;

    // Enumeration of metric types.
    enum Type {
      // Average field value.
      AVG = 0;
      // Minimum field value.
      MIN = 1;
      // Maximum field value.
      MAX = 2;
      // Sum of all field values.
      SUM = 3;
    }

    // The type of metric to apply.
    Type type = 2;
  }

  // Count records the number of unique values for a field.
  message Count {
    // Name of the field to count values from.
    string field = 1;
  }

  // Bucket groups records using filters, Records which satisfy the filter
  // will be included in the bucket.
  message Bucket {
    // Bucket represents records which satisfy a Filter.
    message Bucket {
      // Name of the bucket.
      string name = 1;

      // Filter satisfied by records in the bucket.
      Filter filter = 2;
    }

    // List of buckets.
    repeated Bucket buckets = 1;
  }

  oneof aggregate {
    Metric metric = 1;
    Count count = 2;
    Bucket bucket = 3;
  }
}

// Sort defines the ordering of result records using.
message Sort {
  oneof type {
    // Sort by score.
    bool score = 1;

    // Sort by query score.
    bool query_score = 2;

    // Sort by feature_score;
    bool feature_score = 3;

    // Sort by field values.
    string field = 4;
  }

  // Order is an enumeration that defines orderings for sorting.
  enum Order {
    // Ascending: from least to greatest, for non-numeric
    // fields this means alphabetical order.
    ASC = 0;

    // Descending: from greatest to least, for non-numeric
    // fields this means reverse-alphabetical order.
    DESC = 1;
  }

  // Sorting order.
  Order order = 5;
}

// Filter describes a set of conditions to match values in record fields.
// Filters can be nested and combined using Combinators.
message Filter {
  // Field is a filter which is applied to a record field.
  message Field {
    // Operator is an enumeration of operators.
    enum Operator {
      // Equal value.
      // For STRING fields this is case insensitive.
      EQUAL_TO = 0;

      // Not equal value.
      // For STRING fields this is case insensitive.
      NOT_EQUAL_TO = 1;

      GREATER_THAN = 2;
      GREATER_THAN_OR_EQUAL_TO = 3;
      LESS_THAN = 4;
      LESS_THAN_OR_EQUAL_TO = 5;

      // For STRING fields this is case insensitive.
      CONTAINS = 6;

      // For STRING fields this is case insensitive.
      DOES_NOT_CONTAIN = 7;

      // For STRING fields this is case insensitive.
      HAS_SUFFIX = 8;

      // For STRING fields this is case insensitive.
      HAS_PREFIX = 9;
    }

    // The comparison operator to use.
    Operator operator = 1;

    // Field to take values from.
    string field = 2;

    // Value to match against.
    Value value = 3;
  }

  // Geo is a geo-based filter for records with lat/lng fields representing a location.
  message Geo {
    // Field containing latitude (degrees).
    string field_lat = 1;

    // Field containing longitude (degrees).
    string field_lng = 2;

    // Target latitude (in degrees).
    double lat = 3;

    // Target longitude (in degrees).
    double lng = 4;

    // Radius (in km) of matching border (see region).
    double radius = 5;

    // Region is an enumeration that defines regions for geo-boosting.
    enum Region {
      // Inside is used to configure a geo filter to be
      // satisfied on all points within the radius.
      INSIDE = 0;

      // Outside is used to configure a geo filter to be
      // satisfied to all points outside the radius.
      OUTSIDE = 1;
    }

    // Region for matching points.
    Region region = 6;
  }

  // Combinator is a filter which combines other filters.
  message Combinator {
    // Operator is an enumeration of combination operators.
    enum Operator {
      // All of the filters must be satisfied.
      ALL = 0;

      // Any of the filters must be satisfied.
      ANY = 1;

      // One of the filters (and only one) must be satisfied.
      ONE = 2;

      // None of the filters must be satisfied.
      NONE = 3;
    }

    // The operator used to combine filters.
    Operator operator = 1;

    // The set of filters to combine using the specified Operator.
    repeated Filter filters = 2;
  }

  oneof filter {
    Combinator combinator = 1;
    Field field = 2;
    Geo geo = 3;
  }
}

// FieldBoost is used to influence the score of a record based on its field values.
//
// The effect of a FieldBoost is the value that it contributes to the overall score.
// All boost effects are between 0 and 1 inclusive.
message FieldBoost {
  // Filter is a boost applied to records which satisfy a filter.
  message Filter {
    // Filter which must be satisfied by record.
    sajari.engine.query.v1.Filter filter = 1;

    // Boost value to apply to matching records. Must be >= 0.
    //
    // Value == 0     Matching records get 0 for this boost, everything else gets 1.
    // Value == 1     Matching records get 1 for this boost, everything else gets 0.
    // 0 < Value < 1  Matching records get Value for this boost (and are penalised).
    // Value > 1      Matching records get 1 for this boost, everything else gets 1 / Value.
    double value = 2;
  }

  // Interval is a distance-based boost for numeric fields.
  //
  // It is comprised of a series of points to represent
  // any linear distribution across a numerical range.
  message Interval {
    // Point is a pair (point, value) which defines the boost value
    // at a particiular point.
    message Point {
      // The point to mark the beginning/end of an interval.
      double point = 1;

      // The amount to boost by at this Point.
      double value = 2;
    }

    // Numerical field to apply the boost.
    string field = 1;

    // Points which define intervals boundaries (must be at least 2).
    // Values between internal points are determined linearly.
    repeated Point points = 2;
  }

  // Element is an element-based boost for repeated fields.
  //
  // The boost is evaluated as a portion of a list of values which appear
  // in the record field.
  //
  // Boost effect: between 0 and 1.
  message Element {
    // Field containing stringArray.
    string field = 1;

    // List of elements to compare against the field values.
    repeated string elts = 3;
  }

  // Text represents a text-based boosting for string fields.
  //
  // Compares text (using a bag of words model) and applies a boost based on the
  // number of intersecting words.
  //
  // Boost effect: between 0 and 1.
  message Text {
    // Field containing string data.
    string field = 1;

    // Text to compare against the field value.
    string text = 3;
  }

  oneof field_boost {
    Filter filter = 1;
    Interval interval = 2;
    Element element = 3;
    Text text = 4;
  }
}

// InstanceBoost represents a boosting which is a applied to instances of terms
// in the reverse index.  This type of boost effectively dynamically ranks
// records for a given term
message InstanceBoost {
  // Field is an instance boost which is applied to term instances which originate
  // from the given meta field.
  message Field {
    // Field where the term instance was defined.
    string field = 1;

    // Value to boost terms from this field. A value between 0 and 1 will decrease
    // the score, a value greater than 1 will increase the score.
    double value = 2;
  }

  // Score is an instance boost that boosts term instances based on their individual
  // scores based on individual interactions.
  message Score {
    // Threshold defines the value after which learning will be applied.  i.e. Only if a learning
    // score is significant enough to be beyond the threshold will it start to take effect.
    double threshold = 1;

    // MinCount is the minimum number of interactions required to enable scoring.
    uint32 min_count = 2;
  }

  oneof instance_boost {
    // Field-based instance boosting.
    Field field = 1;
    // Score-based instance boosting.
    Score score = 2;
  }
}

// AggregateResponse contains statistical information representing aggregation results
message AggregateResponse {
  // Metric represents the metric type requested, represented by an Enumeration Type.
  message Metric {
    double value = 1;
  }
  // Count contains the counts for the set of values returned
  message Count {
    map<string, int32> counts = 1;
  }

  // Buckets is a full set of buckets computed in an aggregation.
  message Buckets {
    // Bucket is the result of a bucket aggregate.
    message Bucket {
      // Name of bucket.
      string name = 1;
      // Number of records in the bucket.
      int32 count = 2;
    }
    map<string, Bucket> buckets = 1;
  }

  oneof aggregate_response {
    Metric metric = 1;
    Count count = 2;
    Buckets buckets = 3;
  }
}

// SearchResponse contains all data in response to a search request.
message SearchResponse {
  // Number of reverse indexes read during the search request.
  int64 reads = 1;

  // Total number of results.
  int64 total_results = 2;

  // Time taken to perform query.
  string time = 3;

  // Aggregates returned by query.
  map<string, AggregateResponse> aggregates = 4;

  // Results returned by query.
  repeated Result results = 5;
}

// Result is a record as represented in a search result.
message Result {
  // Meta data in field-value pairs.
  map<string, Value> values = 1;

  // Score (normalised) attributed to this record.
  // Combines the index score and feature score.
  double score = 2;

  // Index score.
  double index_score = 3;
}

// AnalyseRequest applies a search request to a record.
message AnalyseRequest {
  // Request is a search request which should be applied against a record
  // in the store.
  SearchRequest search_request = 1;

  // Key is a unique identifier corresponding to a record in the store.
  repeated sajari.engine.Key keys = 2;
}

// AnalyseResponse contains the analysis of the record against the query
// request.
message AnalyseResponse {
  // Terms is a list of terms which overlap for a particular record.
  message Terms {
    repeated string terms = 1;
  }

  // Terms is the list of intersecting terms between the record and the
  // search query request.
  repeated Terms terms = 1;

  // Status corresponding to each key in the request.
  repeated sajari.rpc.Status status = 2;
}
