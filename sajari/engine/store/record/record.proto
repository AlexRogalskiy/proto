syntax = "proto3";

package sajari.engine.store.record;

import "sajari/engine/value.proto";
import "sajari/engine/key.proto";
import "sajari/rpc/status.proto";

// Store is a service which defines methods for adding, getting, patching
// and deleting records from a collection.
service Store {
  // Add creates new records in the collection returning a key for each
  // stored record.  The key can then be used in subsequent requests to
  // get/delete/patch.
  rpc Add (Records) returns (AddResponse);

  // Replace existing records in the collection with the new values. If
  // a record corresponding to the key does not already exist, then it
  // is added instead.
  rpc Replace (ReplaceRequest) returns (ReplaceResponse);

  // Get retrieves the records corresponding to the listed keys.
  rpc Get (Keys) returns (GetResponse);

  // Delete removes the records corresponding to the listed keys.
  rpc Delete (Keys) returns (DeleteResponse);

  // Mutate applies key-value updates to records corresponding to
  // keys.
  rpc Mutate (MutateRequest) returns (MutateResponse);

  // Exists
  rpc Exists (Keys) returns (ExistsResponse);
}

message ExistsResponse {
  repeated sajari.rpc.Status status = 1;
}

// Score is a service which defines methods for setting and incrementing
// term instance scores.
service Score {
  // SetScores sets record-term instance pos/neg scores in the Store.
  rpc Set (SetRequest) returns (SetResponse);

  // IncrScores incrementally updates record-term instance pos/neg scores in the Store.
  rpc Increment (IncrementRequest) returns (IncrementResponse);
}

// Transform is a representation of a transform process which is applied to a record
// before it is added.
message Transform {
  // Identifier unique identifies a transform
  string identifier = 1;
}

// Record is a single record made up of key-value pairs.
message Record {
  // A map of key-value pairs.
  map<string, sajari.engine.Value> values = 1;

  // A map of field-value indexes.
  map<string, ValueIndexes> value_indexes = 2;
}

// Value indexes are a list of value indexes.
message ValueIndexes {
  repeated ValueIndex value_indexes = 1;
}

// A value index is the term-based representation for a value.
message ValueIndex {
  // Spec for analysis process used in index construction.
  string spec = 1;

  // Groups of lists of terms (i.e. paragraphs).
  repeated Terms terms = 2;
}

// Terms is a list of terms.
message Terms {
  repeated string terms = 1;
}

// Records is a message which represents a list of records.
message Records {
  // The list of records.
  repeated Record records = 1;

  // Transforms is a list of transformations to be applied to the records
  // before they are added.
  repeated Transform transforms = 2;
}

// AddResponse is returned from Add.
message AddResponse {
  // Keys for the inserted records.
  repeated Key keys = 1;

  // Status for each insert.
  repeated sajari.rpc.Status status = 2;
}

// GetResponse is returned from Get.
message GetResponse {
  repeated Record records = 1;

  // Status for each get.
  repeated sajari.rpc.Status status = 2;
}

// DeleteResponse is returned from Delete.
message DeleteResponse {
  repeated sajari.rpc.Status status = 1;
}

// Keys is a list of keys.
message Keys {
  repeated Key keys = 1;
}

message MutateRequest {
  message RecordMutation {
    // Key which uniquely identifies record.
    Key key = 1;

    // MutateField defines a mutation of a field.
    message FieldMutation {
      // Field is the name of the field to mutate.
      string field = 1;

      oneof mutation {
        // Set overrides the current value with the value in set.
        sajari.engine.Value set = 2;

        // Increment takes the current value and incremenets it using the
        // numerical representation of incremenet.  Can only be used on numeric
        // fields.
        //
        // Not yet implemented.
        sajari.engine.Value increment = 3;

        // Append takes the current value and appends a new element to the
        // end.  Can only be used on array fields.
        //
        // Not yet implemented.
        sajari.engine.Value append = 4;
      }
    }

    // List of fields to mutate.
    repeated FieldMutation field_mutations = 2;
  }

  // List of record murations to apply.
  repeated RecordMutation record_mutations = 1;
}

message MutateResponse {
  repeated sajari.rpc.Status status = 1;
}

message SetRequest {
  repeated KeyScores keys_scores = 1;
}

message SetResponse {
  repeated sajari.rpc.Status status = 1;
}

message IncrementRequest {
  repeated KeyScores keys_scores = 1;
}

// Increment response is
message IncrementResponse {
  repeated sajari.rpc.Status status = 1;
}

message KeyScores {
  // Record identifier key.
  Key key = 1;

  // Score values for an array of terms.
  message Score {
    // Terms to score.
    repeated string terms = 1;

    // Count of interactions (uint16).
    int32 count = 2;

    // Score for interactions.
    float score = 3;
  }

  // Scores to update.
  repeated Score scores = 2;
}

message ReplaceRequest {
  // Key record pairs for replacement.
  message KeyRecord {
    // Key to identify record with.
    Key key = 1;

    // Record to replace existing record with.
    Record record = 2;
  }

  // List of key-records pairs to replace.
  repeated KeyRecord key_records = 1;
}

message ReplaceResponse {
  // Keys, non-empty for when replace actually did an Add instead.
  repeated Key keys = 1;

  // Status for each replacement.
  repeated sajari.rpc.Status status = 2;
}