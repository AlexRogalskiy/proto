syntax = "proto3";

package sajari.api.query;

import "sajari/engine/query/query.proto";

service Query {
  // Search performs a search.
  rpc Search (SearchRequest) returns (SearchResponse);
}

// SearchRequest
message SearchRequest {
  // Underlying search request to be passed to the engine
  engine.query.SearchRequest search_request = 1;

  message Tracking {
    enum Type {
      // No tracking will occur.
      NONE = 0;

      // Click tracking will be used.
      //
      // A click token will be generated for each result.  To register a click see <the other
      // API calls>.  Results which are returned and not clicked on will fall down rankings, and
      // similarly low-ranked documents which receive clicks will be moved up the rankings.
      CLICK = 1;

      // Pos/neg tokens will be generated for each result.  Each document in the result set can be
      // marked with pos/neg value for the search.  This is then fed back into the ranking algorithm
      // to improve future results.  Unlike CLICK, if no tokens are reported for documents then
      // no action is taken.
      POS_NEG = 2;
    }

    // Tracking mode for query.
    //
    // Tracking is done using tokens which are added to result sets and identify individual results.
    // Tokens are used to improve the ranking of documents by reporting clicks (i.e. positive action)
    // or pos/neg (i.e positive or negative reporting) on the position of a document in results.
    Type type = 1;

    // Query ID of the query.  If this is empty, then one is generated.
    string query_id = 2;

    // Sequence number of query.
    int32 sequence = 3;

    // Tracking field (must be unique in the collection) used to identify documents in the collection.
    string field = 4;

    // Custom values to be included in tracking data.
    map<string, string> data = 5;
  }

  // Tracking configuration for the query.
  Tracking tracking = 4;

  // Transforms to be applied to the query (can be before, after or even on failure).
  repeated Transform transforms = 5;
}

// SearchResponse is a wrapped response from the engine with interaction tokens
// and other information which was used to construct the query from the SearchRequest.
message SearchResponse {
  // SearchResponse from the engine request.
  engine.query.SearchResponse search_response = 1;

  // SearchRequest used in the query (if this has been changed).
  engine.query.SearchRequest search_request = 2;

  // Tokens which correspond to the result documents.
  repeated Token tokens = 3;
}

// Tokens are used to mark result documents as well/poorly ranked for a query.
// TODO(dhowden): fix this comment!
message Token {
  // Click is a token that corresponds to selecting a document from a result set.
  // It is taken as an indication that this document is a good match for the
  // corresponding SearchRequest.
  message Click {
    string token = 1;
  }

  // PosNeg is a pair of tokens which are used to mark a document as a good/bad
  // result for a SearchRequest.
  message PosNeg {
    string pos = 1;
    string neg = 2;
  }

  oneof token {
    Click click = 1;
    PosNeg pos_neg = 2;
  }
}

message Transform {
  enum RunType {
    // Run the transform before the query.
    PRE_QUERY = 0;
    // Run the transform on the requs
    POST_NON_EMPTY = 1;
    // After an empty query this will apply the transform to the query and the re-run the query.
    POST_EMPTY_PRE_RETRY = 2;
  }

  // When to run the transform.
  RunType run_type = 1;

  // Identifier for the transform.
  string identifier = 2;
}
