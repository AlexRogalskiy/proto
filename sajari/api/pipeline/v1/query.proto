syntax = "proto3";

package sajari.api.pipeline.v1;

import "sajari/engine/value.proto";
import "sajari/api/pipeline/v1/pipeline.proto";

// Query provides methods for querying collections using pipelines.
service Query {
  rpc Search (SearchRequest) returns (SearchResponse);
}

// SearchRequest is a request to perform a search using a pipeline.
message SearchRequest {
  // Pipeline to run.
  Pipeline pipeline = 1;

  // Values is a mapping of key -> value which should be substituted
  // into the algorithm inputs.
  map<string,string> values = 2;

  message Tracking {
    enum Type {
      // No tracking will occur.
      NONE = 0;

      // Click tracking will be used.
      //
      // A click token will be generated for each result.  To register a click see <the other
      // API calls>.  Results which are returned and not clicked on will fall down rankings, and
      // similarly low-ranked records which receive clicks will be moved up the rankings.
      CLICK = 1;

      // Pos/neg tokens will be generated for each result.  Each record in the result set can be
      // marked with pos/neg value for the search.  This is then fed back into the ranking algorithm
      // to improve future results.  Unlike CLICK, if no tokens are reported for records then
      // no action is taken.
      POS_NEG = 2;
    }

    // Tracking mode for query.
    //
    // Tracking is done using tokens which are added to result sets and identify individual results.
    // Tokens are used to improve the ranking of records by reporting clicks (i.e. positive action)
    // or pos/neg (i.e positive or negative reporting) on the position of a record in results.
    Type type = 1;

    // Query ID of the query.  If this is empty, then one is generated.
    string query_id = 2;

    // Sequence number of query.
    int32 sequence = 3;

    // Tracking field (must be unique in the collection) used to identify records in the collection.
    string field = 4;

    // Custom values to be included in tracking data.
    map<string, string> data = 5;
  }

  // Tracking is the tracking configuration.
  Tracking tracking = 3;
}

// Tokens are used to mark result records as well/poorly ranked for a query.
// TODO(dhowden): fix this comment!
message Token {
  // Click is a token that corresponds to selecting a record from a result set.
  // It is taken as an indication that this record is a good match for the
  // corresponding SearchRequest.
  message Click {
    string token = 1;
  }

  // PosNeg is a pair of tokens which are used to mark a record as a good/bad
  // result for a SearchRequest.
  message PosNeg {
    string pos = 1;
    string neg = 2;
  }

  oneof token {
    Click click = 1;
    PosNeg pos_neg = 2;
  }
}

// SearchResponse is a response to a Search call.
message SearchResponse {
  // Input values with updates/modifications by querying system.
  map<string, string> values = 1;

  // SearchResponse contains all data in response to a search request.
  message SearchResponse {
    // Number of reverse indexes read during the search request.
    int64 reads = 1;

    // Total number of results.
    int64 total_results = 2;

    // Time taken to perform query.
    string time = 3;

    // AggregateResponse contains statistical information representing aggregation results
    message AggregateResponse {
      // Metric represents the metric type requested, represented by an Enumeration Type.
      message Metric {
        double value = 1;
      }
      // Count contains the counts for the set of values returned
      message Count {
        map<string, int32> counts = 1;
      }

      // Buckets is a full set of buckets computed in an aggregation.
      message Buckets {
        // Bucket is the result of a bucket aggregate.
        message Bucket {
          // Name of bucket.
          string name = 1;
          // Number of records in the bucket.
          int32 count = 2;
        }
        map<string, Bucket> buckets = 1;
      }

      oneof aggregate_response {
        Metric metric = 1;
        Count count = 2;
        Buckets buckets = 3;
      }
    }

    // Aggregates returned by query.
    map<string, AggregateResponse> aggregates = 4;

    // Result is a record as represented in a search result.
    message Result {
      // Meta data in field-value pairs.
      map<string, sajari.engine.Value> values = 1;

      // Score (normalised) attributed to this record.
      // Combines the index score and feature score.
      double score = 2;

      // Index score.
      double index_score = 3;
    }

    // Results returned by query.
    repeated Result results = 5;
  }

  // SearchResponse from the engine request.
  SearchResponse search_response = 2;

  // Tokens which correspond to the result records.
  repeated Token tokens = 3;
}
